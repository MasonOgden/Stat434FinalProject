count(animal_type) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = animal_type, y = prop)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
ylim(0, 1)
train %>%
count(animal_type) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = animal_type, y = prop)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
ylim(0, 1) +
labs(x = "Animal Type", y = "Frequency",
title = "Proportion of Dogs and Cats in Training Data")
train %>%
count(animal_type) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = animal_type, y = prop)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
ylim(0, 1) +
labs(x = "Animal Type", y = "Frequency",
title = "Proportion of Cats and Dogs in Training Data")
train %>%
count(animal_type) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = animal_type, y = prop)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
ylim(0, 1) +
labs(x = "Animal Type", y = "Frequency",
title = "Proportion of Cats and Dogs in Training Data") +
theme_minimal()
train
train %>% pull(sex) %>% unique()
train %>% drop_na() %>% pull(sex) %>% unique()
train %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex
))
train %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex
)) %>%
select(sex, sex_bin)
train %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") ~ "Neutered",
str_detect(sex, pattern = "Spayed") ~ "Spayed",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status)
train %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") ~ "Neutered",
str_detect(sex, pattern = "Spayed") ~ "Spayed",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status)
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") ~ "Neutered",
str_detect(sex, pattern = "Spayed") ~ "Spayed",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status)
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") ~ "Neutered",
str_detect(sex, pattern = "Spayed") ~ "Spayed",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack")
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") | str_detect(sex, pattern = "Spayed") ~ "Spayed/Neutered",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack")
scales::hue_pal()(3)
my_colors <- scales::hue_pal()(3)
names(my_colors) <- c('Intact', 'Spayed/Neutered', 'Unknown')
my_colors <- scales::hue_pal()(3)
names(my_colors) <- c('Intact', 'Spayed/Neutered', 'Unknown')
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") | str_detect(sex, pattern = "Spayed") ~ "Spayed/Neutered",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack") +
scale_fill_manual(
values = my_colors,
limits = c('Intact', 'Spayed/Neutered')
)
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") | str_detect(sex, pattern = "Spayed") ~ "Spayed/Neutered",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack")
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") | str_detect(sex, pattern = "Spayed") ~ "Spayed/Neutered",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack") +
labs(x = "Sex", y = "Count", fill = "Status")
train %>%
drop_na() %>%
mutate(sex_bin = case_when(
str_detect(sex, pattern = "Male") ~ "Male",
str_detect(sex, pattern = "Female") ~ "Female",
TRUE ~ sex),
sex_status = case_when(
str_detect(sex, pattern = "Neutered") | str_detect(sex, pattern = "Spayed") ~ "Spayed/Neutered",
str_detect(sex, pattern = "Intact") ~ "Intact",
TRUE ~ sex)
) %>%
select(sex, sex_bin, sex_status) %>%
group_by(sex_bin) %>%
count(sex_status) %>%
ggplot(aes(x = sex_bin, y = n, fill = sex_status)) +
geom_col(position = "stack") +
labs(x = "Sex", y = "Count", fill = "Status",
title = "Sex and Status of 26,728 Animals in the Training Data")
train
train %>%
ggplot(aes(x = age)) +
geom_histogram()
train %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 2)
train %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 2, fill = "dodgerblue2")
train %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 2, fill = "dodgerblue2") +
theme_minimal()
train %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 2, fill = "dodgerblue2") +
theme_minimal() +
labs(x = "Age (years)",
y = "Count",
title = "Distribution of Animal Age in Training Data")
train
train %>%
count(color)
train %>%
count(color) %>%
arrange(desc(n))
desc_colors <- train %>%
count(color) %>%
arrange(desc(n)) %>% pull(color)
train %>%
mutate(color = factor(color, levels = desc_colors))
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color)
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col()
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col() +
coord_flip()
desc_colors <- train %>%
count(color) %>%
arrange(n) %>% pull(color)
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col() +
coord_flip()
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col() +
coord_flip() +
labs(x = "Animal Coloring",
y = "Count",
title = "Animal Coloring of Animals in Training Data")
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col(fill = "dodgerblue2") +
coord_flip() +
labs(x = "Animal Coloring",
y = "Count",
title = "Animal Coloring of Animals in Training Data")
train %>%
mutate(color = factor(color, levels = desc_colors)) %>%
count(color) %>%
ggplot(aes(x = color, y = n)) +
geom_col(fill = "dodgerblue2") +
coord_flip() +
labs(x = "Animal Coloring",
y = "Count",
title = "Animal Coloring of Animals in Training Data") +
theme_minimal()
train
count(outcome_month
train %>%
train %>%
count(outcome_month)
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2")
?scale_x_discrete
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_discrete(breaks = 1:12)
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_discrete(breaks = 1:12, labels = 1:12)
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_continuous(breaks = 1:12, labels = 1:12)
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_continuous(breaks = 1:12, labels = 1:12) +
labs(x = "Month",
y = "Number of Outcomes")
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_continuous(breaks = 1:12, labels = 1:12) +
labs(x = "Month",
y = "Number of Animals Experiencing Given Outcome")
train %>%
count(outcome_month) %>%
ggplot(aes(x = outcome_month, y = n)) +
geom_col(fill = "dodgerblue2") +
scale_x_continuous(breaks = 1:12, labels = 1:12) +
labs(x = "Month",
y = "Number of Animals Experiencing Given Outcome",
title = "Distribution of Animal Outcome Occurrences by Month")
train
train %>%
count(year)
train
train %>%
count(outcome_year)
train %>%
count(outcome_year) %>%
ggplot(aes(x = outcome_year, y = n)) +
geom_col(fill = "dodgerblue2")
train %>%
count(outcome_year) %>%
ggplot(aes(x = outcome_year, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
labs(x = "Year", y = "Number of Animals Experiencing Given Outcome")
train %>%
count(outcome_year) %>%
ggplot(aes(x = outcome_year, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
labs(x = "Year", y = "Number of Animals Experiencing Given Outcome",
title = "Distribution of Animal Outcome Occurrences by Year")
train
train %>%
count(outcome)
train %>%
count(outcome) %>%
gglot(aes(x = outcome, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8)
train %>%
count(outcome) %>%
ggplot(aes(x = outcome, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8)
desc_outcomes <- train %>%
count(outcome) %>%
arrange(desc(n)) %>%
pull(outcome)
train %>%
mutate(outcome = factor(outcome, levels = desc_outcomes))
train %>%
mutate(outcome = factor(outcome, levels = desc_outcomes)) %>%
count(outcome) %>%
ggplot(aes(x = outcome, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8)
train %>%
mutate(outcome = factor(outcome, levels = desc_outcomes)) %>%
count(outcome) %>%
ggplot(aes(x = outcome, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
labs(x = "Outcome", y = "Count",
title = "Distribution of Animal Outcomes in the Training Data")
train %>%
mutate(outcome = factor(outcome, levels = desc_outcomes)) %>%
count(outcome) %>%
ggplot(aes(x = outcome, y = n)) +
geom_col(fill = "dodgerblue2", width = 0.8) +
labs(x = "Outcome", y = "Count",
title = "Distribution of Animal Outcomes in the Training Data") +
theme_minimal()
install.packages("plsmod")
library(tidyverse)
library(magrittr)
library(lubridate)
library(tidymodels)
library(baguette)
library(plsmod)
install.packages("mixOmics")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
library(plsmod) #not available for this version of R
library(tidyverse)
library(magrittr)
library(lubridate)
library(tidymodels)
library(baguette)
library(plsmod) #not available for this version of R
library(rules)
library(discrim)
set.seed(143)
install.packages("tidymodels")
library(tidyverse)
library(magrittr)
library(tidymodels)
library(baguette)
library(plsmod)
library(rules)
library(discrim)
set.seed(143)
dir <- here::here()
preproc_dir <- dir %>%
paste0("/preprocessed_data")
train_small <- preproc_dir %>%
paste0("/train_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome = factor(outcome),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
) %>%
slice_sample(n = 2000)
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv()
train_cv <- vfold_cv(train_small, v = 5, strata = outcome)
animal_rec <- recipe(outcome ~ ., data = train_small) %>%
update_role(animal_id, new_role = "ID") %>%
step_normalize(age) %>%
step_nzv(mix) %>%
step_dummy(all_nominal_predictors())
#step_nzv(contains("animal_type"),
#         contains("sex"), contains("color"),
#         contains("outcome_month"),
#         contains("outcome_year"))
animal_trained <- animal_rec %>% prep(train_small)
train_proc <- animal_trained %>% bake(train_small)
class_spec_names <- c()
class_spec_list <- vector(mode= "list", length = 4)
lda_spec_names <- c()
lda_spec_list <- vector(mode = "list", length = 1)
other_spec_names <- c()
other_spec_list <- vector(mode = "list", length = 3)
svm_spec_names <- c()
svm_spec_list <- vector(mode = "list", length = 2)
rule_spec_names <- c()
rule_spec_list <- vector(mode = "list", length = 2)
btree_tune1 <- boost_tree(mtry = tune(),
min_n = tune(),
tree_depth = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
btree_tune1_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(btree_tune1)
btree_tune1_grid <- grid_regular(mtry(c(1, ncol(train_proc))),
min_n(),
tree_depth(),
levels = 3
)
btree_tune1_gs <- tune_grid(
btree_tune1_wflow,
resamples = train_cv,
grid = btree_tune1_grid
)
btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean)
3^3
best_btree_tune1 <- btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean)
best_btree_tune1 <- btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean)
best_mtry <- best_btree_tune1 %>%
pull(mtry)
best_min_n <- best_btree_tune1 %>%
pull(min_n)
best_tree_depth <- best_btree_tune1 %>%
pull(tree_depth)
btree_tune2 <- boost_tree(mtry = best_mtry,
min_n = best_min_n,
tree_depth = best_tree_depth,
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
btree_tune2_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(btree_tune2)
btree_tune2_grid <- grid_regular(trees(),
learn_rate(),
levels = 3
)
btree_tune2_gs <- tune_grid(
btree_tune2_wflow,
resamples = train_cv,
grid = btree_tune2_grid
)
