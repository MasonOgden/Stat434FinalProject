add_recipe(animal_rec) %>%
add_model(btree_tune2)
btree_tune2_grid <- grid_regular(trees(),
learn_rate(),
levels = 3
)
btree_tune2_gs <- tune_grid(
btree_tune2_wflow,
resamples = train_cv,
grid = btree_tune2_grid
)
lda_flex_tune <- discrim_flexible(prod_degree = tune(),
prune_method = tune()) %>%
set_engine("earth") %>%
set_mode("classification")
lda_tune_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(lda_flex_tune)
lda_tune_grid <- expand.grid(prod_degree = c(1, 2), prune_method = c("backward", "none"))
lda_tune_gs <- tune_grid(
lda_tune_wflow,
resamples = train_cv,
grid = lda_tune_grid
)
best_lda_attrs <- lda_tune_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
# value = 1
best_prod_degree <- best_lda_attrs %>%
pull(prod_degree)
# value = "backward"
best_prune_method <- best_lda_attrs %>%
pull(prune_method)
best_lda_flex_spec <- discrim_flexible(prod_degree = best_prod_degree,
prune_method = best_prune_method) %>%
set_engine("earth") %>%
set_mode("classification")
lda_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_lda_flex_spec)
dtree_tune <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
dtree_tune_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(dtree_tune)
dtree_tune_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 3)
dtree_tune_gs <- tune_grid(
dtree_tune_wflow,
resamples = train_cv,
grid = dtree_tune_grid
)
best_dtree_attrs <- dtree_tune_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_cost_complexity <- best_dtree_attrs %>%
pull(cost_complexity)
best_tree_depth <- best_dtree_attrs %>%
pull(tree_depth)
best_min_n <- best_dtree_attrs %>%
pull(min_n)
best_dtree_spec <- decision_tree(cost_complexity = best_cost_complexity,
tree_depth = best_tree_depth,
min_n = best_min_n) %>%
set_engine("rpart") %>%
set_mode("classification")
best_dtree_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_dtree_spec)
best_cost_complexity
rforest_tune <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("randomForest") %>%
set_mode("classification")
rforest_tune_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(rforest_tune)
rforest_tune_grid <- grid_regular(mtry(c(1, ncol(train_proc))),
dials::trees(),
min_n(),
levels = 2
)
rforest_tune_gs <- tune_grid(
rforest_tune_wflow,
resamples = train_cv,
grid = rforest_tune_grid
)
install.packages("randomForest")
rforest_tune <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("randomForest") %>%
set_mode("classification")
rforest_tune_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(rforest_tune)
rforest_tune_grid <- grid_regular(mtry(c(1, ncol(train_proc))),
dials::trees(),
min_n(),
levels = 2
)
rforest_tune_gs <- tune_grid(
rforest_tune_wflow,
resamples = train_cv,
grid = rforest_tune_grid
)
best_rforest_attrs <- rforest_tune_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_mtry <- best_rforest_attrs %>%
pull(mtry)
best_trees <- best_rforest_attrs %>%
pull(trees)
best_min_n <- best_rforest_attrs %>%
pull(min_n)
best_rforest_spec <- rand_forest(mtry = best_mtry,
trees = best_trees,
min_n = best_min_n) %>%
set_engine("randomForest") %>%
set_mode("classification")
best_rforest_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_rforest_spec)
best_mtry
best_trees
best_min_n
btree_tune1 <- boost_tree(mtry = tune(),
min_n = tune(),
tree_depth = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
btree_tune1_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(btree_tune1)
btree_tune1_grid <- grid_regular(mtry(c(1, ncol(train_proc))),
min_n(),
tree_depth(),
levels = 3
)
btree_tune1_gs <- tune_grid(
btree_tune1_wflow,
resamples = train_cv,
grid = btree_tune1_grid
)
best_btree_tune1 <- btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_mtry <- best_btree_tune1 %>%
pull(mtry)
best_min_n <- best_btree_tune1 %>%
pull(min_n)
best_tree_depth <- best_btree_tune1 %>%
pull(tree_depth)
best_mtry
best_min_n
best_tree_depth
btree_tune2 <- boost_tree(mtry = best_mtry,
min_n = best_min_n,
tree_depth = best_tree_depth,
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
btree_tune2_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(btree_tune2)
btree_tune2_grid <- grid_regular(trees(),
learn_rate(),
levels = 2
)
btree_tune2_gs <- tune_grid(
btree_tune2_wflow,
resamples = train_cv,
grid = btree_tune2_grid
)
best_btree_tune2 <- btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_num_trees <- best_btree_tune2 %>%
pull(trees)
btree_tune1_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_btree_tune2 <- btree_tune2_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
btree_tune2_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_btree_tune2 <- btree_tune2_gs %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean) %>%
slice_tail()
best_num_trees <- best_btree_tune2 %>%
pull(trees)
best_learn_rate <- best_btree_tune2 %>%
pull(learn_rate)
best_num_trees
best_learn_rate
set_mode("classification")
best_btree_spec <- boost_tree(mtry = best_mtry,
min_n = best_min_n,
tree_depth = best_tree_depth,
trees = best_num_trees,
learn_rate = best_learn_rate) %>%
set_engine("xgboost") %>%
set_mode("classification")
best_btree_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_btree_spec)
best_btree_spec <- boost_tree(mtry = best_mtry,
min_n = best_min_n,
tree_depth = best_tree_depth,
trees = best_num_trees,
learn_rate = best_learn_rate) %>%
set_engine("xgboost") %>%
set_mode("classification")
best_btree_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_btree_spec)
tuned_wflow <- list(best_lda_flex_spec, best_dtree_spec, best_btree_spec, best_rforest_spec)
tuned_wflow_cvfit <- tuned_wflow %>%
map(\(x) x %>% fit_resamples(resamples = train_cv))
tuned_wflow[[1]]
tuned_wflow[[2]]
tuned_wflow <- list(best_lda_flex_wflow, best_dtree_wflow, best_btree_wflow, best_rforest_wflow)
tuned_wflow_cvfit <- tuned_wflow %>%
map(\(x) x %>% fit_resamples(resamples = train_cv))
tuned_wflow[[1]]
tuned_wflow <- list(best_lda_flex_wflow, best_dtree_wflow, best_btree_wflow, best_rforest_wflow)
best_lda_flex_spec <- discrim_flexible(prod_degree = best_prod_degree,
prune_method = best_prune_method) %>%
set_engine("earth") %>%
set_mode("classification")
best_lda_flex_wflow <- workflow() %>%
add_recipe(animal_rec) %>%
add_model(best_lda_flex_spec)
tuned_wflow <- list(best_lda_flex_wflow, best_dtree_wflow, best_btree_wflow, best_rforest_wflow)
tuned_wflow_cvfit <- tuned_wflow %>%
map(\(x) x %>% fit_resamples(resamples = train_cv))
tuned_wflow[[1]] %>% collect_metrics()
tuned_wflow[[1]]
tuned_wflow_cvfit[[1]] %>%
collect_metrics()
model_names <- c("flexible LDA", "decision tree", "boosted tree", "random forest")
tuned_model_names <- c("flexible LDA", "decision tree", "boosted tree", "random forest")
tuned_cv_results <- map2_df(tuned_wflow_cvfit, tuned_model_names,
\(x, y) x %>%
collect_metrics() %>%
add_column(model_name = y, .before = ".metric") %>%
dplyr::select(model_name, metric = .metric, cv_value = mean)
)
tuned_cv_results
tuned_cv_results %>%
filter(metric == "roc_auc") %>%
arrange(cv_value) %>%
pull(model_name)
asc_rocauc_order <- tuned_cv_results %>%
filter(metric == "roc_auc") %>%
arrange(cv_value) %>%
pull(model_name)
tuned_cv_results %>%
mutate(model_name = factor(model_name, levels = asc_rocauc_order)) %>%
ggplot(aes(x = model_name, y = cv_value, fill = metric)) +
geom_col(position = "dodge") +
coord_flip() +
labs(x = "", y = "Cross-validated Value",
title = "Comparing Cross-validated Metrics of 4 Classification Models",
subtitle = "Note: All hyperparameters have been tuned")
eval_metrics <- metric_set(roc_auc, accuracy, precision, recall, f_meas
tuned_model_names <- c("flexible LDA", "decision tree", "boosted tree", "random forest")
tuned_wflow <- list(best_lda_flex_wflow, best_dtree_wflow, best_btree_wflow, best_rforest_wflow)
tuned_model_names <- c("flexible LDA", "decision tree", "boosted tree", "random forest")
tuned_wflow <- list(best_lda_flex_wflow, best_dtree_wflow, best_btree_wflow, best_rforest_wflow)
eval_metrics <- metric_set(roc_auc, accuracy, precision, recall, f_meas)
tuned_wflow_cvfit <- tuned_wflow %>%
map(\(x) x %>% fit_resamples(resamples = train_cv,
metrics = evall_metrics))
tuned_wflow_cvfit <- tuned_wflow %>%
map(\(x) x %>% fit_resamples(resamples = train_cv,
metrics = eval_metrics))
tuned_cv_results <- map2_df(tuned_wflow_cvfit, tuned_model_names,
\(x, y) x %>%
collect_metrics() %>%
add_column(model_name = y, .before = ".metric") %>%
dplyr::select(model_name, metric = .metric, cv_value = mean)
)
tuned_cv_results
asc_rocauc_order <- tuned_cv_results %>%
filter(metric == "roc_auc") %>%
arrange(cv_value) %>%
pull(model_name)
tuned_cv_results %>%
mutate(model_name = factor(model_name, levels = asc_rocauc_order)) %>%
ggplot(aes(x = model_name, y = cv_value, fill = metric)) +
geom_col(position = "dodge") +
coord_flip() +
labs(x = "", y = "Cross-validated Value",
title = "Comparing Cross-validated Metrics of 4 Classification Models",
subtitle = "Note: All hyperparameters have been tuned")
train <- preproc_dir %>%
paste0("/train_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome = factor(outcome),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
)
final_fit <- best_lda_flex_wflow %>%
fit(train)
pred_outcomes <- final_fit %>%
predict(new_data = test)
test
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv()
test
dir <- here::here()
preproc_dir <- dir %>%
paste0("/preprocessed_data")
train_small <- preproc_dir %>%
paste0("/train_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome = factor(outcome),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
) %>%
slice_sample(n = 2000)
train_cv <- vfold_cv(train_small, v = 5, strata = outcome)
animal_trained <- animal_rec %>% prep(train_small)
animal_trained <- animal_rec %>% prep(train_small)
test_proc <- animal_trained %>% bake(test)
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome = factor(outcome),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
)
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
)
animal_trained <- animal_rec %>% prep(train_small)
test_proc <- animal_trained %>% bake(test)
pred_outcomes <- final_fit %>%
predict(new_data = test)
test
train
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_id = as.character(animal_id)
animal_type = factor(animal_type),
test <- preproc_dir %>%
paste0("/test_preprocessed.csv") %>%
read_csv() %>%
drop_na() %>%
mutate(
animal_id = as.character(animal_id),
animal_type = factor(animal_type),
sex = factor(sex),
color = factor(color),
outcome_month = factor(outcome_month),
outcome_year = factor(outcome_year),
mix = factor(mix)
)
pred_outcomes <- final_fit %>%
predict(new_data = test)
pred_outcomes
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes))
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class)
?predict
pred_outcomes <- final_fit %>%
predict(new_data = test, type = "class")
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class)
library(fastDummies)
install.packages(fastDummies)
install.packages("fastDummies")
library(fastDummies)
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class)
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols()
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome) %>%
rename_if(~str_detect("_"), ~str_remove(.x, pattern = "outcome_"))
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome) %>%
rename_if(~str_detect(.x, pattern = "_"), ~str_remove(.x, pattern = "outcome_"))
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome)
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome, ID,
Adoption = outcome_Adoption,
Died = outcome_Died,
Euthanasia = outcome_Euthanasia,
Return_to_owner = outcome_Return_to_owner,
Transfer = outcome_Transfer) %>%
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome, ID,
Adoption = outcome_Adoption,
Died = outcome_Died,
Euthanasia = outcome_Euthanasia,
Return_to_owner = outcome_Return_to_owner,
Transfer = outcome_Transfer)
pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome, ID,
Adoption = outcome_Adoption,
Died = outcome_Died,
Euthanasia = outcome_Euthanasia,
Return_to_owner = outcome_Return_to_owner,
Transfer = outcome_Transfer)
submission <- pred_outcomes %>%
add_column(ID = 1:nrow(pred_outcomes)) %>%
select(ID, outcome = .pred_class) %>%
dummy_cols() %>%
select(-outcome, ID,
Adoption = outcome_Adoption,
Died = outcome_Died,
Euthanasia = outcome_Euthanasia,
Return_to_owner = outcome_Return_to_owner,
Transfer = outcome_Transfer)
submission_dir <- dir %>%
paste0("/submissions")
submission %>%
write_csv(file = paste0(submission_dir, "/submission1.csv"))
train_small <- preproc_dir %>%
paste0("/train_preprocessed.csv") %>%
read_csv()
train_small <- preproc_dir %>%
paste0("/train_preprocessed.csv") %>%
read_csv() %>%
# drop rows with missing values
drop_na()
26729 - 25320
